{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Here you'll find a collection of my thoughts on different coding topics and concepts. </p> <p>Here's a list of notes to start on:</p> <ul> <li>Closures</li> </ul>"},{"location":"Closures/","title":"Closures","text":"<pre><code>function beginAdding(inputValue) {\nreturn function(secondValue) {\nreturn inputValue + secondValue;\n}\n}\nlet gimmeFive = beginAdding(5);\nconsole.log(gimmeFive(3)) // \"8\"\n</code></pre> <p>The most foundational concept for functional programming, and one of my favorite things in programming.</p>"},{"location":"Closures/#what-makes-closures-so-special","title":"What makes closures so special?","text":"<p>The main thing to understand about closures is that they allow you to wrap code in a block, optionally with some parameters coming from outside, and then interact with that internal code in a controlled manner.</p> <p>Another neat thing about closures is that any language that has First Class Functions can do closures. That means that if you learn how to think using closures, you will immediately find yourself at home in any of those languages.</p>"},{"location":"Closures/#why-is-that-a-useful-thing","title":"Why is that a useful thing?","text":"<p>If you think about the way I described closures up above, I'm essentially describing an interface to interact with some private state, right? That's literally what classes do in most other programming languages, but since we have First Class Functions, we get that behavior for free.</p> <p>This allows you to do pretty cool things, like:</p> <ul> <li>iterators</li> <li>generators Javascript References#Generators</li> <li>classical behavior for objects Javascript References#Private members</li> <li>currying Functional Programming References#Currying</li> </ul>"},{"location":"Closures/#but-do-people-actually-use-closures","title":"But do people actually use closures?","text":"<p>Yes, and here's a list of things that utilize closures:</p> <ul> <li>CALLBACKS!!! (the inner function is being passed in from the outside, but it's being called in the context of the function it was passed into.)</li> <li>Functional Programming</li> <li>SolidJS's signals: SolidJS References#Signals explanation</li> <li>Promises: Javascript References#Promise Explanation</li> </ul>"},{"location":"First%20Class%20Functions/","title":"First Class Functions","text":"<p>This just means functions are considered another type of value, like numbers, booleans, strings, objects, etc.</p>"},{"location":"Functional%20Programming/","title":"Functional Programming","text":"<p>sucks.</p> <p>...but it has a lot of good ideas.</p>"},{"location":"Reference%20Pages/Functional%20Programming%20References/","title":"Functional Programming References","text":""},{"location":"Reference%20Pages/Functional%20Programming%20References/#currying","title":"Currying","text":"<p>what is currying?</p>"},{"location":"Reference%20Pages/Javascript%20References/","title":"Javascript References","text":""},{"location":"Reference%20Pages/Javascript%20References/#generators","title":"Generators","text":"<p>Generators</p>"},{"location":"Reference%20Pages/Javascript%20References/#private-members","title":"Private members","text":"<p>Javascript doesn't have a built-in concept of private members. Here's how to do it (Crockford is using prototype syntax here, be warned it'll look funky): Making private fields</p>"},{"location":"Reference%20Pages/Javascript%20References/#prototypal-inheritance","title":"Prototypal Inheritance","text":"<p>In order of probable usefulness: What are object prototypes? Prototypal inheritance docs Prototype inheritance tutorial</p>"},{"location":"Reference%20Pages/Javascript%20References/#promise-documentation","title":"Promise Documentation","text":"<p>Promises documentation</p>"},{"location":"Reference%20Pages/Javascript%20References/#promise-explanation","title":"Promise Explanation","text":"<p>Promises explanation</p>"},{"location":"Reference%20Pages/SolidJS%20References/","title":"SolidJS References","text":""},{"location":"Reference%20Pages/SolidJS%20References/#the-documentation","title":"The documentation","text":"<p>The docs</p>"},{"location":"Reference%20Pages/SolidJS%20References/#signals-explanation","title":"Signals explanation","text":"<p>Explains how signals work behind the scenes (very simplified): How signals work</p>"},{"location":"Reference%20Pages/SolidJS%20References/#primitive-intro","title":"Primitive intro","text":"<p>Describes the three \"primitives\" (concepts) that SolidJS introduces (signals, effects, memos): Intro to \"primitives\"</p>"},{"location":"Reference%20Pages/SolidJS%20References/#how-the-primitives-work","title":"How the primitives work","text":"<p>The guy who wrote SolidJS basically details how signals, effects, and memos work (dumbed down, of course): How to write a reactive library</p>"},{"location":"Reference%20Pages/SolidJS%20References/#solid-in-100-seconds","title":"Solid in 100 seconds","text":"<p>Solid in 100 seconds</p>"}]}